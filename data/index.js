import abi from 'ethereumjs-abi'

const code = '60806040526000805534801561001457600080fd5b506000808154809291906001019190505550610158806100356000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063cc80f6f314610051578063e8927fbc1461007c575b600080fd5b34801561005d57600080fd5b50610066610093565b6040518082815260200191505060405180910390f35b34801561008857600080fd5b50610091610119565b005b60003073ffffffffffffffffffffffffffffffffffffffff1663e8927fbc6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156100f957600080fd5b505af115801561010d573d6000803e3d6000fd5b50505050600054905090565b60008081548092919060010191905055505600a165627a7a72305820e8c519a8e98bd9a16d2b2a46019473e64b2337f2d679d478b5202bb7ad9991c80029'
const encodeABI = ({ name, types = [], values = [] }) => {
  const methodABI = abi.methodID(name, types).toString('hex')
  const methodParams = abi.rawEncode(types, values).toString('hex') 
    || Buffer.from([...Array(28).keys()].map(i => 0)).toString('hex')
  return new Buffer(`${methodABI}${methodParams}`, 'hex')
}

export default {
  code: Buffer.from(code, 'hex'),
  callData: encodeABI({ 
    name: 'show' 
  }),
}
